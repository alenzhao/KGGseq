/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cobi.kggseq.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.log4j.Logger;
import org.cobi.kggseq.GlobalManager;
import org.cobi.kggseq.entity.Chromosome;
import org.cobi.kggseq.entity.Individual;
import org.cobi.kggseq.entity.Variant;

import org.rosuda.REngine.REXPMismatchException;
import org.rosuda.REngine.REngineException;
import org.rosuda.REngine.Rserve.RConnection;
import org.rosuda.REngine.Rserve.RserveException;

/**
 *
 * @author JiangLi
 */
public class SKAT {

    RConnection rcon;
    int intParallel;
    Map<String, List<Variant>> geneVars;
    ArrayList<String> altGene;
    List<ArrayList<String>> lstVar;
    List<int[][]> lstVariant;
    HashMap<String, double[]> mapG2P;
    double[] dblPhe;
    boolean boolBinary;
    int intBufferSize;
    private static final Logger LOG = Logger.getLogger(SKAT.class);

    public SKAT() throws RserveException {
        this.rcon = new RConnection();
        this.rcon.eval("pack=\"SKAT\"; if (!require(pack,character.only = TRUE)) { install.packages(pack,dep=TRUE,repos='http://cran.us.r-project.org');if(!require(pack,character.only = TRUE)) stop(\"Package not found\")}");
        this.rcon.eval("pack=\"snow\"; if (!require(pack,character.only = TRUE)) { install.packages(pack,dep=TRUE,repos='http://cran.us.r-project.org');if(!require(pack,character.only = TRUE)) stop(\"Package not found\")}");
        this.rcon.eval("library(SKAT)");
        this.rcon.eval("library(snow)");
//        this.rcon.eval("Rserve()");

        altGene = new ArrayList<String>();
        lstVar = new ArrayList<ArrayList<String>>();
        lstVariant = new ArrayList<int[][]>();
        mapG2P = new HashMap<String, double[]>();
        geneVars = new HashMap<String, List<Variant>>();
    }

    private double[] getPValue(List<int[][]> altZ) throws REngineException, REXPMismatchException {
        double[] dblResult = null;
        try {
            rcon.voidEval("lstZ<-list()");
            for (int k = 0; k < altZ.size(); k++) {
                int[][] Z = altZ.get(k);
                int[] intDim = new int[2];
                intDim[0] = Z.length;
                intDim[1] = Z[0].length;
                int[] intVector = new int[intDim[0] * intDim[1]];
                for (int i = 0; i < intDim[0]; i++) {
                    for (int j = 0; j < intDim[1]; j++) {
                        intVector[i * intDim[1] + j] = Z[i][j];
                    }
                }
                rcon.assign("numVector", intVector);
                rcon.voidEval("lstZ[[" + (k + 1) + "]]<-matrix(numVector,nrow=" + intDim[0] + ",ncol=" + intDim[1] + ",byrow=T)");
            }
            if (boolBinary) {
                rcon.voidEval("numResult<-numeric()");
                rcon.voidEval("lstResult<-parLapply(cl,lstZ,SKATBinary,obj,method=\"SKAT\")");
                rcon.voidEval("numResult<-c(numResult,sapply(lstResult,fun<-function(x){x$p.value}))");
                rcon.voidEval("lstResult<-parLapply(cl,lstZ,SKATBinary,obj,method=\"SKATO\")");
                rcon.voidEval("numResult<-c(numResult,sapply(lstResult,fun<-function(x){x$p.value}))");
                rcon.voidEval("lstResult<-parLapply(cl,lstZ,SKATBinary,obj,method=\"Burden\")");
                rcon.voidEval("numResult<-c(numResult,sapply(lstResult,fun<-function(x){x$p.value}))");
            } else {
                rcon.voidEval("numResult<-numeric()");
                rcon.voidEval("lstResult<-parLapply(cl,lstZ,SKAT,obj,method=\"davies\")");
                rcon.voidEval("numResult<-c(numResult,sapply(lstResult,fun<-function(x){x$p.value}))");
                rcon.voidEval("lstResult<-parLapply(cl,lstZ,SKAT,obj,method=\"optimal.adj\")");
                rcon.voidEval("numResult<-c(numResult,sapply(lstResult,fun<-function(x){x$p.value}))");
            }

            //rcon.assign(".temp", "lstResult<-parLapply(cl,lstZ,SKAT,obj)");
            //REXP r=rcon.parseAndEval("try(eval(parse(text=.temp)),silent=T)");
            //if (r.inherits("try-error")) System.err.println("Error: "+r.toString());
            dblResult = rcon.eval("numResult").asDoubles();
        } catch (RserveException ex) {
            LOG.error(ex);
        }
        return dblResult;
    }

    public void closeRServe() {
        try {
            this.intParallel = 0;
            rcon.voidEval("stopCluster(cl)");
        } catch (RserveException ex) {
            LOG.error(ex);
        }
    }

    public void startRServe(int intParallel) {
        try {
            this.intParallel = intParallel;
            rcon.voidEval("cl<-makeCluster(" + intParallel + ")");
        } catch (RserveException ex) {
            LOG.error(ex);
        }
    }

    public void getGenotypeAndRun(Chromosome chromosome, List<Individual> subjectList, int[] pedEncodeGytIDMap, boolean isPhased, int intNT) {
        if (chromosome == null) {
            System.out.println("No variants are left! SKAT failed!");
        } else {
            geneVars.clear();
            for (Variant var : chromosome.variantList) {
                if (var.encodedGty == null) {
                    continue;
                }
                String strGene = var.geneSymb;
                if (strGene == null) {
                    continue;
                }
                List<Variant> vars = geneVars.get(strGene);
                if (vars == null) {
                    vars = new ArrayList<Variant>();
                    geneVars.put(strGene, vars);
                }
                vars.add(var);
            }
            int intGeneNum = geneVars.size();
            int intL;
            List<List<Variant>> geneVarList = new ArrayList<List<Variant>>(geneVars.values());
            String[] geneSymbs = new String[intNT];
            int s = 0;
            try {
                for (int i = 0; i < intGeneNum; i += intNT) {
                    lstVariant.clear();
                    for (int j = 0; j < intNT; j++) {
                        s = i + j;
                        if (s >= intGeneNum) {
                            break;
                        }
                        List<Variant> vars = geneVarList.get(s);
                        int[][] encodeGyts = new int[vars.size()][];
                        int t = 0;
                        for (Variant var : vars) {
                            encodeGyts[t] = getGenotype(var, isPhased, subjectList, pedEncodeGytIDMap);
                            t++;
                        }
                        lstVariant.add(encodeGyts);
                        geneSymbs[j] = vars.get(0).geneSymb;
                    }
                    if (lstVariant.size() != intParallel) {
                        this.closeRServe();
                        this.startRServe(lstVariant.size()); 
                    }
                    double[] dblP = getPValue(lstVariant);
                    if (dblP == null) {
                        continue;
                    }
                    intL = lstVariant.size();
                    if (boolBinary) {
                        for (int j = 0; j < dblP.length / 3; j++) {
//                    System.out.println(altGene.get(j + i * intParallel));
//                    System.out.println(dblP[j]);
//                    System.out.println(dblP[j + intL]);
//                    System.out.println(dblP[j + intL * 2]);
                            double[] temp = new double[3];
                            temp[0] = dblP[j];
                            temp[1] = dblP[j + intL];
                            temp[2] = dblP[j + intL * 2];
                            mapG2P.put(geneSymbs[j], temp);
                        }
                    } else {
                        for (int j = 0; j < dblP.length / 2; j++) {
                            double[] temp = new double[2];
                            temp[0] = dblP[j];
                            temp[1] = dblP[j + intL];
//                    System.out.println(temp[0]);
//                    System.out.println(temp[1]);
                            mapG2P.put(geneSymbs[j], temp);
                        }
                    }
                }
            } catch (REngineException ex) {
                LOG.error(ex);
            } catch (REXPMismatchException ex) {
                LOG.error(ex);
            }

        }
    }

    public void getGenotypeAndRun1(Chromosome chromosome, List<Individual> subjectList, boolean isPhased, int intNT) {
        if (chromosome == null) {
            System.out.println("No variants are left! SKAT failed!");
        } else {
//            int intCol=0;
            int intCount = 0;
            this.intBufferSize = intNT * 2;//This size may affect the speed of SKAT. 
            for (Variant var : chromosome.variantList) {
                if (var.encodedGty == null) {
                    continue;
                }
                String strGene = var.geneSymb;
                if (strGene == null) {
                    continue;
                }
                if (!altGene.contains(strGene)) {
                    if (intCount >= intBufferSize) {
                        this.getPValueParallel(intNT);
                        altGene.clear();
                        lstVar.clear();
                        lstVariant.clear();
                        intCount = 0;
                    }
                    altGene.add(strGene);
//                    System.out.println(strGene);
                    lstVar.add(new ArrayList<String>());
//                    intCol=0;
                    intCount++;
                }
                String gty = getGenotype1(var, isPhased = false, subjectList); //The first genotype maybe wrong!This should be checked!
//                for(int i=0;i<subjectList.size();i++){
//                    System.out.println(i);
                lstVar.get(altGene.indexOf(strGene)).add(gty);
//                }  
//                intCol++;
            }
            if (intCount > 0) {
                this.getPValueParallel(intNT);
                altGene.clear();
                lstVar.clear();
                lstVariant.clear();
                intCount = 0;
            }

//            for (String[] strGV : lstVar) {
//                int[][] Z = new int[subjectList.size()][strGV.length];
//                for (int j = 0; j<subjectList.size(); j++) {
//                    for (int k = 0; k < strGV.length; k++) {
//                        Z[j][k] = (int) strGV[k].charAt(j);
//                    }
//                }
//                lstVariant.add(Z);
//            }
        }
    }

    private int[] getGenotype(Variant var, boolean isPhased, List<Individual> subjectList, int[] pedEncodeGytIDMap) {
        int[] gty = null;
        int alleleNum = var.getAltAlleles().length + 1;
        int base = 0;
        int subNum = subjectList.size();
        int[] alleleNums = new int[subNum];
        if (isPhased) {
            base = GlobalManager.phasedAlleleBitMap.get(alleleNum);
        } else {
            base = GlobalManager.unphasedAlleleBitMap.get(alleleNum);
        }
        int gtyID = 0;
        for (int subID = 0; subID < subNum; subID++) {
            gtyID = pedEncodeGytIDMap[subID];
            if (gtyID < 0) {
                alleleNums[subID] = 9;
                continue;
            }
            if (isPhased) {
                gty = BinaryGtyProcessor.getPhasedGtyAt(var.encodedGty, alleleNum, base, gtyID);
            } else {
                gty = BinaryGtyProcessor.getUnphasedGtyAt(var.encodedGty, alleleNum, base, gtyID);
            }
            if (gty == null) {
                alleleNums[subID] = 9;
            } else if (gty[0] == gty[1]) {
                if (gty[0] == 0) {
                    alleleNums[subID] = 0;
                } else {
                    alleleNums[subID] = 2;
                }
            } else {
                alleleNums[subID] = 1;
            }
        }
        return alleleNums;
    }

    public String getGenotype1(Variant var, boolean isPhased, List<Individual> subjectList) {
        int[] alleles = null;
        String gtys = "";
        int alleleNum = var.getAltAlleles().length + 1;
        int base = 0;

        if (isPhased) {
            base = GlobalManager.phasedAlleleBitMap.get(alleleNum);
        } else {
            base = GlobalManager.unphasedAlleleBitMap.get(alleleNum);
        }

        for (int subID = 0; subID < subjectList.size(); subID++) {
            if (isPhased) {
//                gty = BinaryGtyProcessor.getPhasedGtyAt(var.encodedGty, alleleNum, base, subID);
            } else {
                alleles = BinaryGtyProcessor.getUnphasedGtyAt(var.encodedGty, alleleNum, base, subID);
            }
            if (alleles == null) {
                gtys += 9;
            } else if (alleles[0] == 0 || alleles[1] == 0) {
                if (alleles[0] == 0 && alleles[1] == 0) {
                    gtys += 0;
                } else {
                    gtys += 1;
                }
            } else {
                gtys += 2;
            }
        }
        return gtys;
    }

    public double[] getPhenotype(List<Individual> subjectList, boolean boolBinary) {
        this.boolBinary = boolBinary;
        dblPhe = new double[subjectList.size()];
        for (int i = 0; i < subjectList.size(); i++) {
            if (boolBinary) {
                dblPhe[i] = subjectList.get(i).getAffectedStatus() - 1;
            } else {
                dblPhe[i] = subjectList.get(i).getAffectedStatus();
            }
        }
        return dblPhe;
    }

    public HashMap<String, double[]> getPValueParallel(int intParallel) {
        int intGeneNum = altGene.size();
        int intRun = intGeneNum / intParallel;
        int intLastRun = intGeneNum % intParallel;
//        HashMap<String, double[]> mapG2P = new HashMap<String, double[]>();

        for (ArrayList<String> strGV : lstVar) {
            int[][] Z = new int[dblPhe.length][strGV.size()];
            for (int j = 0; j < dblPhe.length; j++) {
                for (int k = 0; k < strGV.size(); k++) {
                    Z[j][k] = strGV.get(k).charAt(j) - '0';
                }
            }
            lstVariant.add(Z);
        }

        for (int i = 0; i < intRun + 1; i++) {
            double[] dblP;
            int intL = 0;
            if (i == intRun) {
                if (intLastRun == 0) {
                    return mapG2P;
                }
                dblP = getPValue(intParallel * i, intParallel * i + intLastRun - 1);
                intL = intLastRun;
            } else {
                dblP = getPValue(intParallel * i, intParallel * i + intParallel - 1);
                intL = intParallel;
            }

            if (boolBinary) {
                for (int j = 0; j < dblP.length / 3; j++) {
//                    System.out.println(altGene.get(j + i * intParallel));
//                    System.out.println(dblP[j]);
//                    System.out.println(dblP[j + intL]);
//                    System.out.println(dblP[j + intL * 2]);
                    double[] temp = new double[3];
                    temp[0] = dblP[j];
                    temp[1] = dblP[j + intL];
                    temp[2] = dblP[j + intL * 2];
                    mapG2P.put(altGene.get(j + i * intParallel), temp);
                }
            } else {
                for (int j = 0; j < dblP.length / 2; j++) {
                    double[] temp = new double[2];
                    temp[0] = dblP[j];
                    temp[1] = dblP[j + intL];
//                    System.out.println(temp[0]);
//                    System.out.println(temp[1]);
                    mapG2P.put(altGene.get(j + i * intParallel), temp);
                }
            }
        }
        return mapG2P;
    }

    public HashMap<String, double[]> getPValueParallel1(int intParallel) {
        int intGeneNum = altGene.size();
        int intRun = intGeneNum / intParallel;
        int intLastRun = intGeneNum % intParallel;
//        HashMap<String, double[]> mapG2P = new HashMap<String, double[]>();

        for (ArrayList<String> strGV : lstVar) {
            int[][] Z = new int[dblPhe.length][strGV.size()];
            for (int j = 0; j < dblPhe.length; j++) {
                for (int k = 0; k < strGV.size(); k++) {
                    Z[j][k] = strGV.get(k).charAt(j) - '0';
                }
            }
            lstVariant.add(Z);
        }

        for (int i = 0; i < intRun + 1; i++) {
            double[] dblP;
            int intL = 0;
            if (i == intRun) {
                if (intLastRun == 0) {
                    return mapG2P;
                }
                dblP = getPValue(intParallel * i, intParallel * i + intLastRun - 1);
                intL = intLastRun;
            } else {
                dblP = getPValue(intParallel * i, intParallel * i + intParallel - 1);
                intL = intParallel;
            }

            if (boolBinary) {
                for (int j = 0; j < dblP.length / 3; j++) {
//                    System.out.println(altGene.get(j + i * intParallel));
//                    System.out.println(dblP[j]);
//                    System.out.println(dblP[j + intL]);
//                    System.out.println(dblP[j + intL * 2]);
                    double[] temp = new double[3];
                    temp[0] = dblP[j];
                    temp[1] = dblP[j + intL];
                    temp[2] = dblP[j + intL * 2];
                    mapG2P.put(altGene.get(j + i * intParallel), temp);
                }
            } else {
                for (int j = 0; j < dblP.length / 2; j++) {
                    double[] temp = new double[2];
                    temp[0] = dblP[j];
                    temp[1] = dblP[j + intL];
//                    System.out.println(temp[0]);
//                    System.out.println(temp[1]);
                    mapG2P.put(altGene.get(j + i * intParallel), temp);
                }
            }
        }
        return mapG2P;
    }

    public double[] getPValue(int intStart, int intEnd) {
        try {
            int intParallel = intEnd - intStart + 1;
            if (intParallel != this.intParallel) {
                this.closeRServe();
                this.startRServe(intParallel);
            }
            List<int[][]> lstPartVariant = lstVariant.subList(intStart, intEnd + 1);
            double[] dblP = this.getPValue(lstPartVariant);
            return dblP;
        } catch (REngineException ex) {
            LOG.error(ex);
        } catch (REXPMismatchException ex) {
            LOG.error(ex);
        }
        return null;
    }

    public void setPhenotype(double[] dblPhe, boolean boolSkatBinary) {
        try {
            //Set Phenotype.
            rcon.assign("y", dblPhe);
            if (boolSkatBinary) {
                rcon.voidEval("obj<-SKAT_Null_Model(y ~ 1, out_type=\"D\")");
            } else {
                rcon.voidEval("obj<-SKAT_Null_Model(y~1,out_type=\"C\")");
            }
        } catch (REngineException ex) {
            LOG.error(ex);
        }
    }

    public HashMap<String, double[]> getMapG2P() {
        return mapG2P;
    }

}
