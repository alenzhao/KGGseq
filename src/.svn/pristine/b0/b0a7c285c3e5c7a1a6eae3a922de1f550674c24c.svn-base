/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cobi.kggseq.controller;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import org.apache.log4j.Logger;

import java.util.HashMap;
import java.util.List;

import static org.cobi.kggseq.GlobalManager.PLUGIN_PATH;

import org.cobi.kggseq.Options;
import org.cobi.kggseq.entity.AnnotationSummarySet;
import org.cobi.kggseq.entity.Chromosome;
import org.cobi.kggseq.entity.Variant;
import org.cobi.kggseq.entity.mRNA;
import org.cobi.util.download.stable.HttpClient4API;
 
/**
 *
 * @author JiangLi
 */
public class Phenolyzer {
    
    private static final Logger LOG = Logger.getLogger(Phenolyzer.class);
    String strPerlPath;
    String strCMD;
    File fleOutput=new File(PLUGIN_PATH+"phenolyzer-master\\out\\result\\result");
    String strPhenolyzerPath;
    HashMap<String,String> hmpPhenolyzer=null; 
    BufferedReader br=null;
    BufferedWriter bw=null;
    List<String> altSearchTerms=null;
    String strURL="https://github.com/WangGenomicsLab/phenolyzer/archive/master.zip";

    public Phenolyzer(List<String> searchTerms) {
        this.strPerlPath="C:\\Strawberry\\perl\\bin\\perl.exe";
        this.strPhenolyzerPath=PLUGIN_PATH+"phenolyzer-master\\disease_annotation.pl";
        altSearchTerms=searchTerms;
    }

    public void runPhenolyzer() {
        try {            
//            bw=new BufferedWriter(new FileWriter(fleInput));
//            for(int i=0;i<altSearchTerms.size();i++){
//                bw.write((String) altSearchTerms.get(i));
//                bw.newLine();
//            }
//            bw.close();
            String strItems="";
            for(int i=0;i<altSearchTerms.size();i++)    strItems+=altSearchTerms.get(i)+";";
            strItems=strItems.substring(0, strItems.length()-1);
            if(!fleOutput.getParentFile().exists()) fleOutput.getParentFile().mkdir();
            strCMD=strPerlPath+" "+strPhenolyzerPath+" \'"+strItems+"\' -p -ph -logistic -out "+fleOutput.getCanonicalPath();
            Runtime.getRuntime().exec(strCMD);
        } catch (IOException ex) {
            LOG.error(ex);
        }
    }

    public void parseResult() {
        try {
//            if(fleInput==null || !fleInput.exists()) return;
            hmpPhenolyzer=new HashMap<String,String>();
            br = new BufferedReader(new FileReader(fleOutput.getCanonicalFile()+".final_gene_list"));
            
            String strLine;
//            while((strLine=br.readLine())!=null){
//                if(strLine.contains("Normalized score")){
//                    String[] strItems=strLine.split("\t");
//                    double[] dblScore=new double[2];
//                    dblScore[0]=Double.parseDouble(strItems[1].substring(18));
//                    dblScore[1]=Double.parseDouble(strItems[2].substring(11));
//                    hmpPhenolyzer.put(strItems[0], dblScore);
//                }
//            }
            
               while((strLine=br.readLine())!=null){
                String[] strItems=strLine.split("\t");
                hmpPhenolyzer.put(strItems[1], strItems[3]);
            }         
            br.close();
        } catch (FileNotFoundException ex) {
            LOG.info(ex);

        } catch (IOException ex) {
            LOG.info(ex);
        }
    }

    public HashMap<String, String> getHashMap() {
        return this.hmpPhenolyzer;
    }

    public void addScore(Chromosome chromosome, AnnotationSummarySet ass, HashMap<String, String> hmpPhenolyzer) {
        int intNum = 0;
        if (chromosome == null) {
            return;
        }
        
        int varFeatureNum=ass.getAvailableFeatureIndex();
        for (Variant var : chromosome.variantList) {
            if (var.geneSymb == null) {
                var.setFeatureValue(varFeatureNum, null);
//                var.setFeatureValue(ass.getAvailableFeatureIndex() + 1, null);
                continue;
            }
            String strGene=var.geneSymb.toUpperCase();
            if(hmpPhenolyzer.containsKey(strGene)){
                var.setFeatureValue(varFeatureNum, hmpPhenolyzer.get(strGene));
                intNum++;
            } else {
                var.setFeatureValue(varFeatureNum, ".");
            }
        }

        ass.setAnnotNum(ass.getAnnotNum() + intNum);
        ass.setTotalNum(ass.getTotalNum() + chromosome.mRNAList.size());
        ass.setLeftNum(ass.getLeftNum() + chromosome.mRNAList.size() - intNum);
    }   
    
    public void downloadPhenolyzer(){
        File fleOutputDir=new File(PLUGIN_PATH+"phenolyzer/");
        if(!fleOutputDir.exists()){
            try {
                HttpClient4API.simpleRetriever(strURL, fleOutputDir.getCanonicalPath());
                
            } catch (Exception ex) {
                LOG.error(ex);               
            }
        }
        
    }
    
}
