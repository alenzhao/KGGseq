/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cobi.kggseq.entity;

import cern.colt.function.IntIntProcedure;
import cern.colt.list.IntArrayList;
import cern.colt.map.OpenIntIntHashMap;
import java.io.Serializable;

/**
 *
 * @author mxli
 */
public class VCFBitGtySetting implements Serializable {
    
    private static final long serialVersionUID = 3L;
    public OpenIntIntHashMap gtyPos2bitIndexMap;
    //The reason why I do not directly use coordinates for this is that some coordinates may be identical
    public int maxVariantIndex = -1;
    public int availableBitIndexExtrallelic = 0;
    // public int availableBitIndexBiallelic = 0;
    //a long has 64 bits
    public static final int SPACE_LOAD_FACTOR = 64000;
    public int spaceNumBitBiallelicGty = SPACE_LOAD_FACTOR;
    public int spaceNumBitExtrallelicGty = SPACE_LOAD_FACTOR;
    //space for reads info
    public static final int SPACE_LOAD_FACTOR_READS = 10000;
    
    public int spaceNumReads = 0;
    public int spaceNumGtyQual = 0;
    
    public VCFBitGtySetting() {
        gtyPos2bitIndexMap = new OpenIntIntHashMap();
    }
    
    class MyIntIntProcedure implements IntIntProcedure {
        
        OpenIntIntHashMap targetVcfMap;
        int variantNumTarget;
        int availableGtyBitTarget;
        
        public MyIntIntProcedure(OpenIntIntHashMap targetVcfMap, int variantNumTarget, int availableGtyBitTarget) {
            this.targetVcfMap = targetVcfMap;
            this.variantNumTarget = variantNumTarget;
            this.availableGtyBitTarget = availableGtyBitTarget;
        }
        
        @Override
        public boolean apply(int first, int second) {
            targetVcfMap.put(variantNumTarget + first + 1, second + availableGtyBitTarget);
            return true;
        }
    }
    
    public void mergeVCFBitGtySetting(VCFBitGtySetting taskSetting) {
        OpenIntIntHashMap taskVcfMap = taskSetting.gtyPos2bitIndexMap;
//System.out.println(taskVcfMap.toString());
       
        if (!taskVcfMap.isEmpty()) {
            taskVcfMap.forEachPair(new MyIntIntProcedure(gtyPos2bitIndexMap, maxVariantIndex, availableBitIndexExtrallelic));
        }
       
        if (taskSetting.maxVariantIndex >= 0) {
            maxVariantIndex += (taskSetting.maxVariantIndex + 1);
        }
        availableBitIndexExtrallelic += taskSetting.availableBitIndexExtrallelic;
        //spaceNumBitBiallelicGty += taskSetting.spaceNumBitBiallelicGty;
        //spaceNumBitExtrallelicGty += taskSetting.spaceNumBitExtrallelicGty;

    }
    
    public void cleanAllIndexes() {
        maxVariantIndex = -1;
        gtyPos2bitIndexMap.clear();
    }
    
    public int addBitIndexUnphasedGty(int alleleNum, int base) {
        int index = -1;
        maxVariantIndex++;
        if (alleleNum > 2) {
            index = gtyPos2bitIndexMap.get(maxVariantIndex);
            //the value associated with the specified key; 0 if no such key is present.
            if (index == 0) {
                index = availableBitIndexExtrallelic;
                //add one inevitable to aviod 0
                gtyPos2bitIndexMap.put(maxVariantIndex, index + 1);
                //real extra allele bit is this
                availableBitIndexExtrallelic += (base - 2);
            } else {
                index--;
            }
        }

        //No need extra bits for bialleles snps
        return index;
    }
}
