/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cobi.kggseq.entity;

import cern.colt.bitvector.QuickBitVector;
import java.io.Serializable;
import java.util.Arrays;
import org.apache.log4j.Logger;
import org.cobi.kggseq.GlobalManager;
import org.cobi.util.text.Util;

/**
 *
 * @author mxli this class is designed according to the VCF format to store the
 * genotypes it will be used together the Variant class
 */
public class VCFBitGtySet implements Serializable {

    private static final Logger LOG = Logger.getLogger(VCFBitGtySet.class);
    private static final long serialVersionUID = 5L;
    //use 2 bits present a genotype 00  missing; 01 homo ref; 01 heter; 11 homo alt

    public long[] biallelicGtySetArray;
    public long[] extraGtySetArray;
    public int availableBitIndexExtrallelic = 0;
    public int availableBitIndexBiallelic = 0;

    public char[] readInfor;
    public int availableReadInfor = 0;
    public String[] detailedGtyQual = null;
    public int availableGtyQual = 0;

    //temp variables
    StringBuilder stringBuilder = new StringBuilder();

    public VCFBitGtySet(int gtySpaceNum, int readSpaceNum, int qualInforNum) {
        //a long has 64 bits
        biallelicGtySetArray = new long[gtySpaceNum / 64];
        extraGtySetArray = new long[gtySpaceNum / 64];
        //two chars for a gty; seldom used
        readInfor = new char[readSpaceNum];
        detailedGtyQual = new String[qualInforNum];
    }

    public void releaseAllSpace() {
        biallelicGtySetArray = new long[0];
        extraGtySetArray = new long[0];
        //two chars for a gty; seldom used
        readInfor = new char[0];
        detailedGtyQual = new String[0];
        availableBitIndexBiallelic = 0;
        availableBitIndexExtrallelic = 0;
        availableReadInfor = 0;
        availableGtyQual = 0;
    }

    public void mergeBitGty(VCFBitGtySet bgs) {
        long[] tmp = null;
        int i;
        long effective;
//need remove gaps
        if (bgs.availableBitIndexBiallelic > 0) {
            tmp = new long[biallelicGtySetArray.length + bgs.biallelicGtySetArray.length];
            System.arraycopy(biallelicGtySetArray, 0, tmp, 0, biallelicGtySetArray.length);
            i = 0;
            effective = 0;
            do {
                effective = QuickBitVector.getLongFromTo(bgs.biallelicGtySetArray, i, i + 63);
                QuickBitVector.putLongFromTo(tmp, effective, availableBitIndexBiallelic + i, availableBitIndexBiallelic + i + 63);
                i += 63;
            } while (i < bgs.availableBitIndexBiallelic);
            availableBitIndexBiallelic += bgs.availableBitIndexBiallelic;
            biallelicGtySetArray = tmp;
        }

        if (bgs.availableBitIndexExtrallelic > 0) {
            tmp = new long[extraGtySetArray.length + bgs.extraGtySetArray.length];
            System.arraycopy(extraGtySetArray, 0, tmp, 0, extraGtySetArray.length);
            i = 0;
            effective = 0;
            do {
                effective = QuickBitVector.getLongFromTo(bgs.extraGtySetArray, i, i + 63);
                QuickBitVector.putLongFromTo(tmp, effective, availableBitIndexExtrallelic + i, availableBitIndexExtrallelic + i + 63);
                i += 63;
            } while (i < bgs.availableBitIndexExtrallelic);
            availableBitIndexExtrallelic += bgs.availableBitIndexExtrallelic;
            extraGtySetArray = tmp;
        }
        if (bgs.readInfor != null && bgs.availableReadInfor > 0 && bgs.readInfor.length > 0) {
            char[] tmp1 = new char[readInfor.length + bgs.readInfor.length];
            System.arraycopy(readInfor, 0, tmp1, 0, availableReadInfor);
            System.arraycopy(bgs.readInfor, 0, tmp1, availableReadInfor, bgs.availableReadInfor);
            availableReadInfor += bgs.availableReadInfor;
            readInfor = tmp1;
        }
        if (bgs.detailedGtyQual != null && bgs.availableGtyQual > 0 && bgs.detailedGtyQual.length > 0) {
            String[] tmp1 = new String[detailedGtyQual.length + bgs.detailedGtyQual.length];
            System.arraycopy(detailedGtyQual, 0, tmp1, 0, availableGtyQual);
            System.arraycopy(bgs.detailedGtyQual, 0, tmp1, availableGtyQual, bgs.availableGtyQual);
            availableGtyQual += bgs.availableGtyQual;
            detailedGtyQual = tmp1;
        }
    }

    //specical function for loading read infor
    public void mergeReadInfor(char[] newReadInfor, int effectiveSites) {
        char[] tmp1 = new char[readInfor.length + newReadInfor.length];
        System.arraycopy(readInfor, 0, tmp1, 0, availableReadInfor);
        System.arraycopy(newReadInfor, 0, tmp1, availableReadInfor, effectiveSites);
        availableReadInfor += effectiveSites;
        readInfor = tmp1;
    }

    //specical function for loading read infor
    public void mergeGtyQualInfor(String[] newReadInfor, int effectiveSites) {
        String[] tmp1 = new String[detailedGtyQual.length + newReadInfor.length];
        System.arraycopy(detailedGtyQual, 0, tmp1, 0, availableGtyQual);
        System.arraycopy(newReadInfor, 0, tmp1, availableGtyQual, effectiveSites);
        availableGtyQual += effectiveSites;
        detailedGtyQual = tmp1;
    }

    public void resizeReadInfor(int spaceNumReads) {
        char[] tmp = new char[spaceNumReads];
        System.arraycopy(readInfor, 0, tmp, 0, readInfor.length);
        readInfor = tmp;
    }

    public void resizeGtyQual(int spaceNumReads) {
        String[] tmp = new String[spaceNumReads];
        System.arraycopy(detailedGtyQual, 0, tmp, 0, detailedGtyQual.length);
        detailedGtyQual = tmp;
    }

    public void addGtyQualInforAt(int gtyPos, String infor) {
        if (infor == null) {
            availableGtyQual = gtyPos + 1;
            return;
        }
        detailedGtyQual[gtyPos] = infor;
        availableGtyQual = gtyPos + 1;
    }

    public void addReadsInforAt(int gtyPos, String infor) {
        if (infor == null) {
            availableReadInfor = gtyPos + gtyPos + 2;
            return;
        }
        int delemiterIndex = infor.indexOf(',');
        if (delemiterIndex >= 0) {
            readInfor[gtyPos + gtyPos] = Util.parseChar(infor.substring(0, delemiterIndex));
            readInfor[gtyPos + gtyPos + 1] = Util.parseChar(infor.substring(delemiterIndex + 1));
        }
        availableReadInfor = gtyPos + gtyPos + 2;
    }

    public String getGtyQualAt(int gtyPos) {
        if (gtyPos < availableGtyQual) {
            stringBuilder.delete(0, stringBuilder.length());
            stringBuilder.append(detailedGtyQual[gtyPos]);
            return stringBuilder.toString();
        } else {
            return null;
        }
    }

    public String getReadsInforAt(int gtyPos) {
        if (gtyPos < availableReadInfor) {
            stringBuilder.delete(0, stringBuilder.length());
            stringBuilder.append((int) readInfor[gtyPos + gtyPos]).append(',').append((int) readInfor[gtyPos + gtyPos + 1]);
            return stringBuilder.toString();
        } else {
            return null;
        }
    }

    public int[] getIntReadsInforAt(int gtyPos) {
        int[] reads = new int[2];
        Arrays.fill(reads, 0);
        if (gtyPos < availableReadInfor) {
            reads[0] = (int) readInfor[gtyPos + gtyPos];
            reads[1] = (int) readInfor[gtyPos + gtyPos + 1];

        }
        return reads;
    }

    public boolean addPhasedGtyAt(String gty, int bitIndexBi, int bitIndexEx, int alleleNum, int base) {
        boolean succeed = true;
        /*       
         missing	Reference homozygous	Heterozygous 	Heterozygous 	Alternative homozygous
         VCF genotype	.|.	0|0	0|1	1|0	1|1
         Bits	        000  	001	010	011	100
         Order	0	1	2	3	4                
         */
        /*
         II.II Tri-allelic sequence variant (4 bits)
         missing 	Reference homozygous 	Heterozygous 	Heterozygous 	Heterozygous 	Heterozygous 	Alternative homozygous
         VCF genotype 	.|. 	0|0 	0|1 	1|0 	0|2 	2|0 	1|1
         Bits      	000 	0001 	0010 	0011 	0100 	0101 	0110
         Decimal 	0 	1 	2 	3 	4 	5 	6
         Heterozygous 	Heterozygous 	Alternative homozygous
         VCF genotype 	1|2 	2|1 	2|2
         Bits     	0111 	1000 	1001
         Decimal 	7 	8 	9                
                
         * 
         */
        /*
         II.III Quad-allelic sequence variants (5 bits)
         missing 	Reference homozygous 	Heterozygous 	Heterozygous 	Heterozygous 	Heterozygous 	Heterozygous
         VCF genotype 	.|. 	0|0 	0|1 	1|0 	0|2 	2|0 	0|3
         Bits     	000 	0001 	0010 	0011 	0100 	0101 	0110
         Decimal 	0 	1 	2 	3 	4 	5 	6
         Heterozygous 	Alternative homozygous 	Heterozygous 	Heterozygous 	Heterozygous 	Heterozygous
         VCF genotype 	3|0 	1|1 	1|2 	2|1 	1|3 	3|1
         Bits 	        0111 	1000 	1001 	1010 	1011 	1011
         Decimal 	7 	8 	9 	10 	11 	12
         Alternative homozygous 	Heterozygous 	Heterozygous 	Alternative homozygous
         VCF genotype 	2|2 	2|3 	3|2 	3|3
         Bits 	       1011 	000 	0001 	0001
         Decimal 	13 	14 	15 	16 
         */
        if (gty == null || gty.charAt(0) == '.') {
            //missing value         
            QuickBitVector.put(biallelicGtySetArray, bitIndexBi, false);
            QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 1, false);
            QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 2, false);
            for (int i = 3; i < base; i++) {
                QuickBitVector.put(extraGtySetArray, bitIndexEx + i - 3, false);
            }
        } else {
            switch (alleleNum) {
                case 2:
                    //to speedup the analysis
                    if (gty.charAt(0) == '0' && gty.charAt(2) == '0') {
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi, false);
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 1, false);
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 2, true);
                    } else if (gty.charAt(0) == '0' && gty.charAt(2) == '1') {
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi, false);
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 1, true);
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 2, false);
                    } else if (gty.charAt(0) == '1' && gty.charAt(2) == '0') {
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi, false);
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 1, true);
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 2, true);
                    } else if (gty.charAt(0) == '1' && gty.charAt(2) == '1') {
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi, true);
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 1, false);
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 2, false);
                    } else {
                        String infor = "Sorry!!! the genotype " + gty + " at position " + bitIndexBi / 3 + " cannot be stored and will be ingored!";
                        System.out.println(infor);
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi, false);
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 1, false);
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 2, false);
                        return false;
                    }
                    break;

                default:
                    boolean[] bits = GlobalManager.phasedGtyCodingMap.get(gty + ":" + alleleNum);
                    QuickBitVector.put(biallelicGtySetArray, bitIndexBi, bits[0]);
                    QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 1, bits[1]);
                    QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 2, bits[2]);
                    for (int i = 3; i < base; i++) {
                        QuickBitVector.put(extraGtySetArray, bitIndexEx + i - 3, bits[i]);
                    }
                //String infor = "Sorry!!! squence variants with over 4 alleles are not supported and will be ignored!";
                // System.out.println(infor);
            }
        }
        if (bitIndexEx > 0) {
            availableBitIndexExtrallelic = bitIndexEx + base - 3;
        }
        availableBitIndexBiallelic = bitIndexBi + 3;
        return true;

    }

    public boolean addPhasedGtyBitAt(int gtyPos, boolean[] gty, int alleleNum) {
        boolean succeed = true;

        return succeed;
    }

    public int[] getPhasedGtyAt(int gtyPos, int bitIndexEx, int alleleNum) {
        /*       
         missing	Reference homozygous	Heterozygous 	Heterozygous 	Alternative homozygous
         VCF genotype	.|.	0|0	0|1	1|0	1|1
         Bits	        000  	001	010	011	100
         Order	0	1	2	3	4                
         */
        /*
         II.II Tri-allelic sequence variant (4 bits)
         missing 	Reference homozygous 	Heterozygous 	Heterozygous 	Heterozygous 	Heterozygous 	Alternative homozygous
         VCF genotype 	.|. 	0|0 	0|1 	1|0 	0|2 	2|0 	1|1
         Bits      	000 	0001 	0010 	0011 	0100 	0101 	0110
         Decimal 	0 	1 	2 	3 	4 	5 	6
         Heterozygous 	Heterozygous 	Alternative homozygous
         VCF genotype 	1|2 	2|1 	2|2
         Bits     	0111 	1000 	1001
         Decimal 	7 	8 	9                
                
         * 
         */
        if ((gtyPos + gtyPos + gtyPos + 1) >= availableBitIndexBiallelic) {
            return null;
        }
        try {
            switch (alleleNum) {
                case 2:
                    boolean a1 = QuickBitVector.get(biallelicGtySetArray, gtyPos + gtyPos + gtyPos);
                    boolean a2 = QuickBitVector.get(biallelicGtySetArray, gtyPos + gtyPos + gtyPos + 1);
                    boolean a3 = QuickBitVector.get(biallelicGtySetArray, gtyPos + gtyPos + gtyPos + 2);

                    if (!a1 && !a2 && a3) {
                        return new int[]{0, 0};
                    } else if (!a1 && a2 && !a3) {
                        return new int[]{0, 1};
                    } else if (!a1 && a2 && a3) {
                        return new int[]{1, 0};
                    } else if (a1 && !a2 && !a3) {
                        return new int[]{1, 1};
                    } else if (!a1 && !a2 && !a3) {
                        return null;
                    } else {
                        throw new Exception("Error coding for genotypes at variant " + gtyPos);
                    }

                default:
                    int base = GlobalManager.phasedAlleleBitMap.get(alleleNum);
                    stringBuilder.delete(0, stringBuilder.length());
                    if (QuickBitVector.get(biallelicGtySetArray, gtyPos + gtyPos + gtyPos)) {
                        stringBuilder.append(1);
                    } else {
                        stringBuilder.append(0);
                    }
                    if (QuickBitVector.get(biallelicGtySetArray, gtyPos + gtyPos + gtyPos + 1)) {
                        stringBuilder.append(1);
                    } else {
                        stringBuilder.append(0);
                    }
                    if (QuickBitVector.get(biallelicGtySetArray, gtyPos + gtyPos + gtyPos + 2)) {
                        stringBuilder.append(1);
                    } else {
                        stringBuilder.append(0);
                    }
                    for (int i = 3; i < base; i++) {
                        if (QuickBitVector.get(extraGtySetArray, bitIndexEx + i - 3)) {
                            stringBuilder.append(1);
                        } else {
                            stringBuilder.append(0);
                        }
                    }
                    stringBuilder.append(':').append(alleleNum);
                    int[] alleles = GlobalManager.codingPhasedGtyCodingMap.get(stringBuilder.toString());
                    // String infor = "Sorry!!! squence variants with over 4 alleles are not supported and will be ignored!";
                    // System.out.println(infor);
                    return alleles;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public void getPhasedGtyBitAt(int gtyPos, boolean[] bits, int alleleNum) {

    }

    public void resizeSpaceGtyBitBiallele(int spaceNumBitGtyBi) {
        long[] tmp = new long[spaceNumBitGtyBi / 64];
        System.arraycopy(biallelicGtySetArray, 0, tmp, 0, biallelicGtySetArray.length);
        biallelicGtySetArray = tmp;
    }

    public void resizeSpaceGtyBitExallele(int spaceNumBitGtyEx) {
        long[] tmp = new long[spaceNumBitGtyEx / 64];
        System.arraycopy(extraGtySetArray, 0, tmp, 0, extraGtySetArray.length);
        extraGtySetArray = tmp;
    }

    public boolean addUnphasedGtyAt(String gty, int bitIndexBi, int bitIndexEx, int alleleNum, int base) {
        /*
         missing	Reference homozygous	Heterozygous 	Alternative homozygous
         VCF genotype	./.	0/0	0/1	1/1
         Bits	00  	01	10	11
         Order	0	1	2	3        
         */

        /*
         missing	Reference homozygous	Heterozygous 	Heterozygous	Alternative homozygous	Heterozygous	Alternative homozygous
         VCF genotype	./.	0/0	0/1	0/2	1/1	1/2	2/2
         Bits	        000	001	010	011	100	101	110
         Order	0	1	2	3	4	5	6 
         */
        /*
         I.III Quad-allelic sequence variant (4 bits)
         missing 	Reference homozygous 	Heterozygous 	Heterozygous 	Heterozygous 	Alternative homozygous 	Heterozygous
         VCF genotype 	./. 	0/0 	0/1 	0/2 	0/3 	1/1 	1/2
         Bits 	      000 	0001 	0010 	0011 	0100 	0101 	0110
         Decimal 	0 	1 	2 	3 	4 	5 	6
         Heterozygous 	Alternative homozygous 	Heterozygous 	Alternative homozygous
         VCF genotype 	1/3 	2/2 	2/3 	3/3
         Bits 	     0111 	1000 	1001 	1010
         Decimal 	7 	8 	9 	10                               
         */
        if (gty == null || gty.charAt(0) == '.') {
            //missing value         
            QuickBitVector.put(biallelicGtySetArray, bitIndexBi, false);
            QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 1, false);
            for (int i = 2; i < base; i++) {
                QuickBitVector.put(extraGtySetArray, bitIndexEx + i - 2, false);
            }
        } else {
            switch (alleleNum) {
                case 2:
                    /*
                     missing	Reference homozygous	Heterozygous 	Alternative homozygous
                     VCF genotype	./.	0/0	0/1	1/1
                     Bits	00  	01	10	11
                     Order	0	1	2	3        
                     */
                    //to speedup the analysis
                    if (gty.charAt(0) == '0' && gty.charAt(2) == '0') {
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi, false);
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 1, true);
                    } else if (gty.charAt(0) == '0' && gty.charAt(2) == '1' || gty.charAt(0) == '1' && gty.charAt(2) == '0') {
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi, true);
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 1, false);
                    } else if (gty.charAt(0) == '1' && gty.charAt(2) == '1') {
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi, true);
                        QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 1, true);
                    }
                    break;
                default:
                    boolean[] bits = GlobalManager.unphasedGtyCodingMap.get(gty + ":" + alleleNum);
                    QuickBitVector.put(biallelicGtySetArray, bitIndexBi, bits[0]);
                    QuickBitVector.put(biallelicGtySetArray, bitIndexBi + 1, bits[1]);
                    for (int i = 2; i < base; i++) {
                        QuickBitVector.put(extraGtySetArray, bitIndexEx + i - 2, bits[i]);
                    }
            }
        }
        if (bitIndexEx > 0) {
            availableBitIndexExtrallelic = bitIndexEx + base - 2;
        }

        availableBitIndexBiallelic = bitIndexBi + 2;
        return true;
    }

    public boolean addUnphasedGtyBitAt(int gtyPos, boolean[] gty, int alleleNum) {

        /*
         missing	Reference homozygous	Heterozygous 	Alternative homozygous
         VCF genotype	./.	0/0	0/1	1/1
         Bits	00  	01	10	11
         Order	0	1	2	3        
         */

        /*
         missing	Reference homozygous	Heterozygous 	Heterozygous	Alternative homozygous	Heterozygous	Alternative homozygous
         VCF genotype	./.	0/0	0/1	0/2	1/1	1/2	2/2
         Bits	        000	001	010	011	100	101	110
         Order	0	1	2	3	4	5	6 
         */
        /*
         I.III Quad-allelic sequence variant (4 bits)
         missing 	Reference homozygous 	Heterozygous 	Heterozygous 	Heterozygous 	Alternative homozygous 	Heterozygous
         VCF genotype 	./. 	0/0 	0/1 	0/2 	0/3 	1/1 	1/2
         Bits 	      000 	0001 	0010 	0011 	0100 	0101 	0110
         Decimal 	0 	1 	2 	3 	4 	5 	6
         Heterozygous 	Alternative homozygous 	Heterozygous 	Alternative homozygous
         VCF genotype 	1/3 	2/2 	2/3 	3/3
         Bits 	     0111 	1000 	1001 	1010
         Decimal 	7 	8 	9 	10                               
         */
        return false;
    }

    public int[] getUnphasedGtyAt(int gtyPos, int bitIndexEx, int alleleNum) {
        if ((gtyPos + gtyPos + 1) >= availableBitIndexBiallelic) {
            return null;
        }
        switch (alleleNum) {
            case 2:

                /*
                 missing	Reference homozygous	Heterozygous 	Alternative homozygous
                 VCF genotype	./.	0/0	0/1	1/1
                 Bits	00  	01	10	11
                 Order	0	1	2	3        
                 */
                boolean a1 = QuickBitVector.get(biallelicGtySetArray, gtyPos + gtyPos);
                boolean a2 = QuickBitVector.get(biallelicGtySetArray, gtyPos + gtyPos + 1);

                if (a1 && a2) {
                    return new int[]{1, 1};
                } else if (!a1 && a2) {
                    return new int[]{0, 0};
                } else if (a1 && !a2) {
                    return new int[]{0, 1};
                } else if (!a1 && !a2) {
                    return null;
                }

                break;
            default:
                int base = GlobalManager.unphasedAlleleBitMap.get(alleleNum);
                stringBuilder.delete(0, stringBuilder.length());
                if (QuickBitVector.get(biallelicGtySetArray, gtyPos + gtyPos)) {
                    stringBuilder.append(1);
                } else {
                    stringBuilder.append(0);
                }
                if (QuickBitVector.get(biallelicGtySetArray, gtyPos + gtyPos + 1)) {
                    stringBuilder.append(1);
                } else {
                    stringBuilder.append(0);
                }

                for (int i = 2; i < base; i++) {
                    if (QuickBitVector.get(extraGtySetArray, bitIndexEx + i - 2)) {
                        stringBuilder.append(1);
                    } else {
                        stringBuilder.append(0);
                    }
                }
                stringBuilder.append(':').append(alleleNum);
                int[] alleles = GlobalManager.codingUnphasedGtyCodingMap.get(stringBuilder.toString());
                // String infor = "Sorry!!! squence variants with over 4 alleles are not supported and will be ignored!";
                // System.out.println(infor);
                return alleles;
        }
        return null;
    }

    public boolean[] getUnphasedGtyBitAt(int gtyPos, int bitIndexEx, int alleleNum, boolean[] bits) {
        switch (alleleNum) {
            case 2:
                if ((gtyPos + gtyPos + 1) >= availableBitIndexBiallelic) {
                    bits[0] = false;
                    bits[1] = false;
                    return null;
                }
                /*
                 missing	Reference homozygous	Heterozygous 	Alternative homozygous
                 VCF genotype	./.	0/0	0/1	1/1
                 Bits	00  	01	10	11
                 Order	0	1	2	3        
                 */
                bits[0] = QuickBitVector.get(biallelicGtySetArray, gtyPos + gtyPos);
                bits[1] = QuickBitVector.get(biallelicGtySetArray, gtyPos + gtyPos + 1);
                return null;
            default:
                int base = GlobalManager.unphasedAlleleBitMap.get(alleleNum);
                bits[0] = QuickBitVector.get(biallelicGtySetArray, gtyPos + gtyPos);
                bits[1] = QuickBitVector.get(biallelicGtySetArray, gtyPos + gtyPos + 1);
                boolean[] bitEx = new boolean[base - 2];
                for (int i = 2; i < base; i++) {
                    bitEx[i-2]=QuickBitVector.get(extraGtySetArray, bitIndexEx + i - 2);                    
                }               
                return bitEx;
        }
  
    }
}
